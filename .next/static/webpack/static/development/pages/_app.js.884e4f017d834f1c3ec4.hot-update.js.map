{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.884e4f017d834f1c3ec4.hot-update.js","sources":["webpack:///./ducks/auth/index.js"],"sourcesContent":["import { put, takeLatest, delay } from 'redux-saga/effects'\r\nimport { createReducer, Creator } from '../helper'\r\nimport axios from 'axios'\r\n\r\nconst SET_DATA_AUTH = 'SET_DATA_AUTH'\r\nconst GET_DATA_AUTH = 'GET_DATA_AUTH'\r\nconst LOGIN = 'LOGIN'\r\nconst LOGOUT = 'LOGOUT'\r\n\r\nexport const setDataUser = Creator(SET_DATA_AUTH, 'data')\r\nexport const getUserInfo = Creator(GET_DATA_AUTH)\r\nexport const login = Creator(LOGIN, 'data')\r\nexport const logout = Creator(LOGOUT)\r\n\r\nexport function* getUserInfoSaga() {\r\n  try {\r\n    const checkToken = sessionStorage.getItem('twittee')\r\n    const response = yield axios.get('/api/auth', {\r\n      params: {\r\n        token: checkToken,\r\n      },\r\n    })\r\n\r\n    if (checkToken) {\r\n      yield put(setDataUser({ user: response.data, isLogin: true }))\r\n    }\r\n  } catch (error) {\r\n    console.log('getUserInfoSaga error', error)\r\n  } finally {\r\n    yield put(setDataUser({ initialized: true }))\r\n  }\r\n}\r\n\r\nexport function* loginSaga({ payload: { data } }) {\r\n  yield put(setDataUser({ isLoading: tre }))\r\n  try {\r\n    const response = yield axios.post('/api/auth', data)\r\n    sessionStorage.setItem('twittee', response.data.token)\r\n    yield put(setDataUser({ user: response.data, isLogin: true }))\r\n  } catch (error) {\r\n    switch (error.response.status) {\r\n      case 401:\r\n        yield put(\r\n          setDataUser({ errorMessage: 'email or password is incorrect' }),\r\n        )\r\n        break\r\n      default:\r\n        yield put(setDataUser({ errorMessage: 'server has been down' }))\r\n        break\r\n    }\r\n  } finally {\r\n    yield put(\r\n      setDataUser({\r\n        isLoading: false,\r\n      }),\r\n    )\r\n  }\r\n}\r\n\r\nexport function* logoutSaga() {\r\n  try {\r\n    sessionStorage.clear()\r\n    yield put(setDataUser({ isLogin: false }))\r\n  } catch (error) {\r\n  } finally {\r\n    yield put(\r\n      setDataUser({\r\n        isLoading: false,\r\n      }),\r\n    )\r\n  }\r\n}\r\n\r\nexport function* authWatcher() {\r\n  yield takeLatest(GET_DATA_AUTH, getUserInfoSaga)\r\n  yield takeLatest(LOGIN, loginSaga)\r\n  yield takeLatest(LOGOUT, logoutSaga)\r\n}\r\n\r\nconst initial = {\r\n  user: {},\r\n  initialized: false,\r\n  isLogin: false,\r\n  isLoading: false,\r\n  errorMessage: '',\r\n}\r\n\r\nconst reducer = createReducer(initial, state => ({\r\n  [SET_DATA_AUTH]: ({ data }) => ({\r\n    ...state,\r\n    ...data,\r\n  }),\r\n}))\r\n\r\nexport default reducer\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;;;AAmBA;;;AA0BA;;;AAcA;AACA;AA1EA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAGA;AACA;AACA;AADA;AADA;AACA;AAJA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAUA;AAAA;AAAA;AAAA;AACA;AAXA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAaA;AACA;AAdA;AAAA;AAAA;AAeA;AAAA;AAAA;AACA;AAhBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAGA;AACA;AAJA;AAGA;AACA;AAJA;AAKA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AASA;AACA;AAAA;AACA;AAXA;AAAA;AACA;AADA;AAAA;AAcA;AAAA;AAAA;AACA;AAfA;AAAA;AACA;AADA;AAAA;AAAA;AAkBA;AAEA;AADA;AACA;AApBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAGA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AAEA;AADA;AACA;AARA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AACA;AAAA;AAAA;AADA;AAOA;;;;A","sourceRoot":""}