{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.a2d8534011a413ba1a23.hot-update.js","sources":["webpack:///./components/Login.js","webpack:///./core/helper.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/parse-float.js","webpack:///./node_modules/core-js/library/fn/parse-float.js","webpack:///./node_modules/core-js/library/modules/_parse-float.js","webpack:///./node_modules/core-js/library/modules/es6.parse-float.js"],"sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Field from './share/Field'\r\nimport Loading from './share/Loading'\r\nimport { connect } from 'react-redux'\r\nimport { reduxForm } from 'redux-form'\r\nimport { compose } from 'recompose'\r\nimport { login, setDataUser } from '../ducks/auth'\r\nimport { Button, Icon } from 'antd'\r\nimport { isEmail } from '../core/helper'\r\n\r\nconst Container = styled.form`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n`\r\nconst Form = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`\r\n\r\nconst CustomField = styled(Field)`\r\n  margin: 0 auto 30px;\r\n  width: 100%;\r\n  max-width: 300px;\r\n`\r\n\r\nconst Submit = styled(Button)`\r\n  width: fit-content;\r\n  margin: 0 auto;\r\n`\r\n\r\nconst Error = styled.span`\r\n  color: red;\r\n  margin-bottom: 15px;\r\n`\r\n\r\nconst validate = value => {\r\n  console.log('value', value)\r\n  const error = {}\r\n  if (!value.email) {\r\n    error.email = 'please fill'\r\n  }\r\n  if (!value.password) {\r\n    error.password = 'please fill'\r\n  }\r\n\r\n  return error\r\n}\r\n\r\nconst Login = ({ isLoading, login, handleSubmit, errorMessage, ...props }) => (\r\n  <Loading isLoading={isLoading}>\r\n    <Container onSubmit={handleSubmit(values => login(values))}>\r\n      <Form>\r\n        <CustomField\r\n          name=\"email\"\r\n          type=\"text\"\r\n          placeholder=\"email\"\r\n          addonBefore={<Icon type=\"user\" />}\r\n        />\r\n        <CustomField\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"password\"\r\n          addonBefore={<Icon type=\"lock\" />}\r\n        />\r\n        {errorMessage && <Error>{errorMessage}</Error>}\r\n        <Submit type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Submit>\r\n      </Form>\r\n    </Container>\r\n  </Loading>\r\n)\r\n\r\nconst enhancer = compose(\r\n  connect(\r\n    state => ({\r\n      isLoading: state.auth.isLoading,\r\n      errorMessage: state.auth.errorMessage,\r\n    }),\r\n    { login, setDataUser },\r\n  ),\r\n  reduxForm({\r\n    form: 'login',\r\n    validate,\r\n    onChange: (values, _, props) => {\r\n      props.errorMessage !== '' && props.setDataUser({ errorMessage: '' })\r\n    },\r\n  }),\r\n)\r\n\r\nexport default enhancer(Login)\r\n","import queryString from 'querystring'\r\n// import moment from './moment-buddhist'\r\n\r\n// import addressData from '../static/data/address_data.json'\r\n\r\n// moment.locale('th')\r\n\r\nexport const isPassword = value => {\r\n  const upperRegex = /[A-Z]+/\r\n  const lowerRegex = /[a-z]+/\r\n  const alphabetRegex = /[0-9]+/\r\n  const scopeCharactorRegex = /^[A-Za-z0-9@#]+$/\r\n  return (\r\n    upperRegex.test(value) &&\r\n    lowerRegex.test(value) &&\r\n    alphabetRegex.test(value) &&\r\n    scopeCharactorRegex.test(value)\r\n  )\r\n}\r\n\r\nexport const isPasswordNoon = value => {\r\n  const length = 6\r\n  return value.length >= length\r\n}\r\n\r\n// export const getThaiDate = date => {\r\n//   const d = new Date(date)\r\n//   d.setFullYear(parseInt(d.getFullYear()) + 543)\r\n//   return moment(d).format('ll')\r\n// }\r\n\r\nexport const isNull = value => value === undefined || value === null\r\n\r\nexport const isEmpty = value =>\r\n  value === '' || (value instanceof Object && Object.keys(value).length === 0)\r\nexport const isBlank = value => isNull(value) || isEmpty(value)\r\nexport const isPresent = value => !isBlank(value)\r\n\r\nexport const isPhoneNumber = value => {\r\n  var s = value\r\n\r\n  if (!value) {\r\n    return value\r\n  }\r\n\r\n  if (s.length < 10) {\r\n    return false\r\n  }\r\n\r\n  const reg = /0[896][0-9]{8}/\r\n  return reg.test(s)\r\n}\r\n\r\nconst emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\nexport const isEmail = value => emailRegex.test(value)\r\n\r\nconst intOrFloatRegex = /[+-]?[0-9][0-9]*/\r\nexport const isNumber = value => intOrFloatRegex.test(value)\r\n\r\n// export const generateAddressStructure = addressData => {\r\n//   var obj = []\r\n//   addressData.map((province, i) =>\r\n//     province[1].map((district, j) =>\r\n//       district[1].map((subDistrict, k) =>\r\n//         subDistrict[1].map((postcode, l) => {\r\n//           var newObj = {\r\n//             value: {\r\n//               province: province[0],\r\n//               district: district[0],\r\n//               subDistrict: subDistrict[0],\r\n//               postcode: `${postcode}`,\r\n//             },\r\n//             label: `${province[0]} >> ${district[0]} >> ${\r\n//               subDistrict[0]\r\n//             } >> ${postcode}`,\r\n//           }\r\n//           obj.push(newObj)\r\n//         }),\r\n//       ),\r\n//     ),\r\n//   )\r\n//   return obj\r\n// }\r\n\r\n// export const addressStructure = generateAddressStructure(addressData)\r\n\r\nexport const displayNumber = value => {\r\n  let nums = ('' + value).split('.')\r\n  const onlyNums = nums[0].replace(/[^-\\d]/g, '')\r\n  let rgx = /(\\d+)(\\d{3})/\r\n  let x1 = onlyNums\r\n  while (rgx.test(x1)) {\r\n    x1 = x1.replace(rgx, '$1' + ',' + '$2')\r\n  }\r\n  if (nums.length > 1) x1 = x1 + '.' + nums[1]\r\n  return x1\r\n}\r\n\r\nexport const lessThan = (value, maxValue) => {\r\n  var nums = ('' + value).split('.')\r\n  const onlyNums = nums[0].replace(/[^\\d]/g, '')\r\n  let NewOnlyNums\r\n  if (onlyNums <= maxValue) NewOnlyNums = onlyNums\r\n  else NewOnlyNums = maxValue.toString()\r\n  var rgx = /(\\d+)(\\d{3})/\r\n  var x1 = NewOnlyNums\r\n  while (rgx.test(x1)) {\r\n    x1 = x1.replace(rgx, '$1' + ',' + '$2')\r\n  }\r\n  if (nums.length > 1) x1 = x1 + '.' + nums[1]\r\n  return x1\r\n}\r\n\r\nexport const inRange = (a, b) => (value, previousValue) => {\r\n  if (!value) {\r\n    return a\r\n  }\r\n  if (parseFloat(value) < a) {\r\n    return a\r\n  }\r\n  if (parseFloat(value) > b) {\r\n    return b\r\n  }\r\n  var x1 = (!isNaN(parseFloat(value)) ? parseFloat(value) : value) + ''\r\n  return x1\r\n}\r\n\r\nexport const validId = (id = '') => {\r\n  if (id.length !== 13) return false\r\n  var checksum = id.split('').reduce((mem, char, i) => {\r\n    if (i !== 12) {\r\n      return mem + parseInt(char) * (13 - i)\r\n    } else return mem\r\n  }, 0)\r\n  checksum = (11 - (checksum % 11)) % 10\r\n  return checksum === parseInt(id[12])\r\n}\r\n\r\nexport const hiddenPhoneFormatter = number => {\r\n  if (!number) return ''\r\n  // NNN-NNN-NNNN\r\n  const splitter = /.{1,3}/g\r\n  const hidden = /.{1,6}/\r\n  number = number.replace(/[^\\d|^X]/g, '')\r\n  if (number === '') return ''\r\n  number = number.substring(0, 10)\r\n  const arrayN = number.split('')\r\n  const replaceX = collectX => collectX + 'X'\r\n  const collectArray = arrayN.reduce(replaceX, '')\r\n  number = number.replace(hidden, collectArray.substring(0, 6))\r\n\r\n  return (\r\n    number\r\n      .substring(0, 7)\r\n      .match(splitter)\r\n      .join('-') + number.substring(7)\r\n  )\r\n}\r\n\r\nexport const creditCardFormatter = number => {\r\n  const pattern = 'XXXX-XXXX-XXXX-XXXX'\r\n  return formatter(pattern, number)\r\n}\r\n\r\n// Parser\r\n\r\nexport const formatParser = string => (string ? string.replace(/-/g, '') : '')\r\nexport const numberParser = string =>\r\n  parseFloat(string ? string.replace(/,/g, '') : '')\r\n\r\nexport const dateParser = string => (string ? string.replace(/\\//g, '') : '')\r\n\r\n// Formatter\r\n\r\nexport const idFormatter = number => {\r\n  if (!number) return ''\r\n  // I-IIII-IIIII-II-I\r\n  number = number.replace(/[^\\d]/g, '')\r\n  if (number === '') return ''\r\n\r\n  const pattern = 'X-XXXX-XXXXX-XX-X'\r\n  return formatter(pattern, number)\r\n}\r\n\r\nexport const ThaiDateFormatter = date => {\r\n  if (!date) return ''\r\n\r\n  date = date.replace(/[^\\d]/g, '')\r\n  if (date === '') return ''\r\n\r\n  const pattern = 'XX/XX/XXXX'\r\n  return formatter(pattern, date)\r\n}\r\n\r\nexport const phoneFormatter = number => {\r\n  if (!number) return ''\r\n  // NNN-NNN-NNNN\r\n  const splitter = /.{1,3}/g\r\n  number = number.replace(/[^\\d]/g, '')\r\n  if (number === '') return ''\r\n  number = number.substring(0, 10)\r\n  return (\r\n    number\r\n      .substring(0, 7)\r\n      .match(splitter)\r\n      .join('-') + number.substring(7)\r\n  )\r\n}\r\n\r\nexport const formatter = (pattern = '', number = '') => {\r\n  return pattern.split('').reduce(\r\n    (mem, c) => {\r\n      if (number.length < mem.i + 1) {\r\n        return mem\r\n      }\r\n      if (c === 'X')\r\n        return {\r\n          i: mem.i + 1,\r\n          result: (mem.result += number[mem.i]),\r\n        }\r\n      else {\r\n        return {\r\n          i: mem.i,\r\n          result: (mem.result += c),\r\n        }\r\n      }\r\n    },\r\n    { i: 0, result: '' },\r\n  ).result\r\n}\r\n\r\nexport const onlyEng = (value, previousValue) => {\r\n  const eng = /^[a-zA-Z]*$/\r\n  if (eng.test(value)) return value\r\n  return previousValue\r\n}\r\n\r\nexport const onlyThai = (value, previousValue) => {\r\n  const eng = /^[ก-ฮะาิีึ์ุูโเแ์ำัฯืฺไใาๆ่้๊๋็]*$/\r\n  if (eng.test(value)) return value\r\n  return previousValue\r\n}\r\n\r\n// export const getAge = birthdate =>\r\n//   moment().diff(\r\n//     typeof birthdate === 'string' && birthdate\r\n//       ? moment(birthdate, 'DD-MM-BBBB')\r\n//       : birthdate,\r\n//     'years',\r\n//   )\r\n\r\nexport const getValueFormOptions = (options = [], value) => {\r\n  const selected = options.find(o => o.value === value)\r\n  if (selected) return selected.label\r\n  return ''\r\n}\r\n\r\nexport const url2Obj = params => queryString.parse(params)\r\nexport const obj2Url = params => queryString.stringify(params)\r\n\r\nexport const normalizeDate = value => {\r\n  return value\r\n}\r\n\r\nexport const filterObj = (object = {}, filter = []) =>\r\n  Object.keys(object)\r\n    .filter(key => filter.includes(key))\r\n    .reduce((obj, key) => {\r\n      obj[key] = object[key]\r\n      return obj\r\n    }, {})\r\n\r\nexport const removefilterObj = (object = {}, filter = []) =>\r\n  Object.keys(object)\r\n    .filter(key => !filter.includes(key))\r\n    .reduce((obj, key) => {\r\n      obj[key] = object[key]\r\n      return obj\r\n    }, {})\r\n\r\nexport const convertNaNtoZero = arg =>\r\n  isNaN(parseInt(arg)) ? 0 : parseInt(arg)\r\n","module.exports = require(\"core-js/library/fn/parse-float\");","require('../modules/es6.parse-float');\nmodule.exports = require('../modules/_core').parseFloat;\n","var $parseFloat = require('./_global').parseFloat;\nvar $trim = require('./_string-trim').trim;\n\nmodule.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {\n  var string = $trim(String(str), 3);\n  var result = $parseFloat(string);\n  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n} : $parseFloat;\n","var $export = require('./_export');\nvar $parseFloat = require('./_parse-float');\n// 18.2.4 parseFloat(string)\n$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AACA;AAwBA;AAEA;AACA;AACA;AAFA;AAAA;AAIA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClcA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AANA;AAQA;AAAA;AAAA;;;;;;;;;;;ACxRA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;AACA;AACA;;;;;A","sourceRoot":""}